
# File:     spezifikation-feuerstein.org
# Author:   wost@ewost.de

# Log: 2020-01-23 Datei erzeugt
#      2020-03-26, 2020-04-03, 2020-04-16: aktualisiert
#      2020-05-03 aktualisiert


* Worum geht es?
Das Projekt mit dem Arbeitsnamen "Feuerstein" soll es Forth-Einsteigern leicht
machen, mit der neuen Materie vertraut zu werden. Typische Hindernisse und
Fallstricke werden vermieden. Die Benutzererfahrung steht ganz oben auf der Liste.
Das gelieferte Paket hat den Anspruch, komplett zu sein.
In einer Schachtel befinden sich die teilbestückte Hauptplatine, Bauteile zum
Komplettieren der Schaltung, USB-Seriell-Wandler, USB-Kabel sowie Dokumentation
in Papier- und elekronischer Form. Zur Inbetriebnahme des Systems ist ein PC mit
Linux, MacOS oder Windows erforderlich. Eventuell wird auch Android unterstützt.
Ein Internetzugang wird für den Start nicht benötigt, ist aber später für die
Aktualisierung des Systems zu empfehlen.


* Eigenschaften
** Open Source Software
   - Alles als Quelltext verfügbar
** Open Source Hardware
   - PCB-Designfiles (Schematic, Board, Gerber) im Kicad-Format verfügbar
   - Bill of Material incl. Einkaufsquellen verfügbar
** Webseite
   - Projektwebseite, erzeugt durch Sphinx
** Voller Support
   - Ansprechpartner
   - Ersatz defekter Hardware


* Fragen
  - Wer hilft?
  - Wer testet, gibt Feedback?
  - Wieviel darf ein Streuartikel in der Herstellung kosten?
  - Wieviel kostet das Komplettset?
  - Finanzierung durch Verein?


* Aufgaben [1/8]
** TODO Zielgruppe definieren
   - Hardware-Kenntnis
     + [ ] keinen Schimmer
     + [ ] Grundkenntnis Elektronik
     + [ ] Fundierte Kenntnis Elektronik
     + [ ] Grundkenntnis Mikrocontroller / Digitaltechnik
     + [ ] Fundierte Kenntnis Mikrocontroller / Digitaltechnik
   - Programmier-Kenntnis
     + [ ] keinen Schimmer
     + [ ] erste Programmiersprache Forth
     + [ ] mindestens eine Programmiersprache gelernt
     + [ ] Programmierfreak, alle gängigen Programmiersprachen fließend
   - Personengruppen
     + [ ] Hardwarebastler auf der Suche nach einer geeigneten Programmiersprache
     + [ ] Lehrer, Dozenten (Multiplikatoren)
     + [ ] Schüler
     + [ ] Studenten
     + [ ] Hacker / Maker
     + [ ] Forthkenner mit Spieltrieb
     + [ ] Rentner

** DONE Sprache
   - [ ] Quelltext-Kommentare: Deutsch
   - [X] Quelltext-Kommentare: Englisch
   - [ ] Hilfetexte: Deutsch
   - [X] Hilfetexte: Englisch
   - [X] Dokumentation: erst Deutsch, dann Englisch (deepl.com)
   - [ ] Dokumentation: erst Englisch, dann Deutsch

** TODO Schreibstil Dokumentation festlegen
   - Leseransprache: 
     + Du hast dir bestimmt schon ...
     + Wir kümmern uns heute um die SPI-Schnittstelle und ...
     + Sie könnten die Daten auch über die ...
   - Humor
     + ernst
     + wissenschaftlich
     + streng

** TODO Codestil festlegen
   Ist es sinnvoll, einen einheitlichen Codestil festzulegen oder ist das im
   Umfeld von Forth nicht praktikabel?
   Wenn ein einheitlicher Stil, wie sieht der aus?
   - Einrückung
   - Namen
   - Dateiendungen .fs
   - max. Zeilenlänge 80?

** TODO Einarbeiten in Werkzeuge [0/11]
*** TODO Python
    - [ ] Pyserial
    - [ ] serielles Terminal
    - [ ] Flasher
*** TODO Emacs
    - [ ] Grundfunktionen
    - [ ] Org-Mode
    - [ ] Diff-Tool emerge, smerge-mode, ediff
    - [ ] Export HTML
    - [ ] Export PDF 
*** TODO Sphinx
    - [ ] Doku lesen
    - [ ] Read The Docs
*** TODO Git
    - [ ] Grundlagen
    - [ ] Arbeit lokal
    - [ ] Synchronisation Server
*** TODO Github
    - [ ] Fork
    - [ ] Clone
    - [ ] Push
    - [ ] Pull
    - [ ] Pull Request
*** TODO serielle Terminals
    - [ ] e4thcom  (Linux/Win10/Mac)
    - [ ] minicom  (Linux/Win10/Mac)
    - [ ] Picocom  (Linux/Win10/Mac)
    - [ ] TeraTerm (Win10 only)
*** TODO KiCAD
    - [ ] Schaltplan
    - [ ] PCB
    - [ ] Bibliotheken
    - [ ] Gerber
*** TODO Mecrisp Quintus
    - [ ] unofficial Dokumentation Terry Porter
*** TODO VIS
    - [ ] Doku lesen
    - [ ] Tutorial durscharbeiten
*** TODO Forth-Cloud (NextCloud)
    - [ ] Bedienung
*** TODO Kommunikation
    - [ ] Zoom
    - [ ] Jitsi
    - [ ] EtherPad

** TODO Zusammenarbeit mit HCC!Forth (Willem, Albert)
   - Funktionsweise GD32VF103

** TODO andere Projekte anschauen [0/5]
*** TODO Egel-Project
    - erste Version mit 8051-MCU
    - aktuelle Version mit MSP430
*** TODO JeeLabs
    - Forth-Artikel
    - Code
*** TODO FlashForth
    - Dokumentation Bergbau-Uni Australien
*** TODO Buch "Die Programmiersprache Forth" (Albert Nijhof)
*** TODO Gforth
    - Tutorial
    - Dokumentation

** TODO Chip GD32VF103 [0/5]
*** TODO Interrupts
*** TODO Events
*** TODO Sleep Modes
*** TODO SPI
*** TODO I2C


* Hardware
** Board Longan Nano
   - Platine mit GD32VF103 (48 Pin), LCD 160x80
   - Standard-Entwicklungsumgebung des Projektes
** Board Seeed Studio RISC-V Dev. Board mit LCD 320x240
   - Platine mit GD32VF103VBT6 (100 Pin), 8 MB ser. Flash, 256 Bytes EEprom
   - Option:  LCD 320x240 (Dadurch Standalone-Betrieb möglich)
** Board Polos GD32V Alef von Analoglamb
   - Platine mit GD32VF103CBT6 (48 Pin)
   - Keines Board mit dem Nötigsten (33mm x 33mm)
** Board Eigenentwicklung
*** Hauptplatine, teilbestückt
    - PCB
    - RISC-V GD32VF103
    - Spannungsregler
    - Quarze 8 MHz und 32,768 kHz
    - 8 MB SPI-Flash
    - USB-Buchse
*** lose Teile zum Selbsteinlöten
    - Taster
    - LEDs
    - Pufferzelle für Echtzeituhr (Batterie oder Supercap)
    - Pmod Steckerleisten
    - Schaltkreis zum Vermessen von Bauteilen wie Transistor,
        Diode, Widerstand, Kondensator, Spule

** USB-Seriell-Wandler
   - galvanische Trennung
   - Chip CP2102N
   - Hardware-Handshake
   - Pmod, lose
   - USB-Kabel (Mikro-USB oder USB-C)

** weitere Teile im Paket
   - Fototransistor
   - Potentiometer
   - Pmod-Kabel
   - lose Kabel Buchse/Buchse, verschiedene Längen


* Software
** Firmware auf dem Chip/Board
*** Mecrisp Quintus
    - Assembler
    - Disassembler
    - Fixkomma-Routinen
    - Bedingte Compilierung
*** Forth-Bibliothek
    - USB, USB-OTG
    - SPI, I2C, UART, FIFO
    - CAN
    - Interrupt
    - Timer
    - SD-Karte, SPI-Flash
    - ADC, DAC
    - RTC
*** Interaktives "Schweizer Taschenmesser"
    - Messfunktionen
    - Signalgenerator
    - Protokollanalysator für UART, SPI, I2C, CAN    
*** VIS-System
    Vocs, Items, Sticky words von Manfred
*** History-Buffer
    Speichert die letzten 20 Eingaben. Quintus hat TIB von max. 200 Zeichen.
    Tricky: Quelltextdownload soll nicht im History-Buffer landen.
*** Auto-Vervollständigung
    - Dictionary-Einträge
    - selbst definierte Floskeln
*** Eingebautes Hilfesystem im SPI-Flash
    - Sprache: Englisch, eventuell später auch eine Version Deutsch
    - Worte und ihre Funktion / Bedeutung
        (mit Beispiel-Quelltext zum Ausprobieren)
    - Registerbeschreibung und momentane Werte anzeigen / setzen
    - Verbose-Flag zur Umschaltung der Detailierung der Ausgabe
*** Forth-Beispieldateien
    - Blinkprogramm
    - Spiele
*** Interaktives Tutorial (macht Carsten)
    - User kann auf dem Chip Forth lernen

** auf dem PC
  - Entwicklungssystem
    + Program zum Flashen von Quintus (Python)
    + Selbstgeschriebene IDE (Python) nach Vorbild "5th"
    + Emacs incl. Syntax-Highlighting und Terminal
    + e4thcom (Manfreds Terminal)
    + picocom (Linux)
    + minicom (Linux)
    + Teraterm (Windows)
    + Mac ???


* Dokumentation
** Heft: Schnelleinstieg (erste Schritte) für den Ungeduldigen
   - Platine zusammenbauen
   - Einrichten einer Entwicklungsumgebung
   - Blinkprogramm starten und verändern

** Buchreihe: Mecrisp Quintus
*** Buch1: Tutorial
*** Buch2: Benutzerhandbuch
*** Buch3: Referenzhandbuch

** Buch: Der Mikrocontroller GD32VF103
   - Einführung Mikrocontroller
   - RISC-V Befehlssatz-Architektur
   - Pinbelegung Chip
   - CPU
   - Speicherorganisation
   - Reset
   - Interrupts / Events
   - Oszillator
   - Spezial-Funktionsregister
   - Ports
   - Timer
   - Serielle Schnittstellen
     - UART
     - SPI
     - I2C
   - ADC
   - Anhang
     + ASCII-Tabelle
     + Befehlssatz
     + Dezimal/Binär/Hex-Tabelle

** Buch: Kochbuch / Rezepte
   - Schrittmotor-Steuerung
   - Porterweiterung I2C
   - CAN-Bus-Interface
   - 1-Wire-Temperaturlogger
   - Larson-Scanner
   - Multitasking
   - Fixkomma-Arithmetik
   - Benutzerschnittstellen
   - 2x16 LCD
   - OLED 128x64
   - Matrix-Tastatur

** Hardware Benutzerhandbuch
   - Liste der Anschlüsse mit Beschreibung 
   - Schaltplan
   - Funktionsweise der Schaltung
   - Kurzbeschreibung Bausteine

** Datenblätter / Benutzerhandbücher verwendeter Bausteine
   - GD32VF103
   - SPI-Flash
   - CP2102N
